"use strict"

function email_test(input) {
	return !/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,8})+$/.test(input.value);
}
// ? How to use
// * 1. select tag must have wrapper. For expample div.select-container
// * 2. select tag must not contains ".select" class
// * 3. don't forget setting "value" attribute for all options
// * 4. For styling uses ".select" class

//Select
let selects = document.getElementsByTagName('select');
let slideUpDuration = 400;
if (selects.length > 0) {
	selects_init();
}
function selects_init() {
	for (let index = 0; index < selects.length; index++) {
		const select = selects[index];
		select_init(select);
	}
	//select_callback();
	document.addEventListener('click', function (e) {
		selects_close(e);
	});
	document.addEventListener('keydown', function (e) {
		if (e.which == 27) {
			selects_close(e);
		}
	});
}
function selects_close(e) {
	const selects = document.querySelectorAll('.select');
	if (!e.target.closest('.select')) {
		for (let index = 0; index < selects.length; index++) {
			const select = selects[index];
			const select_body_options = select.querySelector('.select__options');
			select.classList.remove('_active');
			_slideUp(select_body_options, 100);
		}
	}
}
function select_init(select) {
	const select_parent = select.parentElement;
	const select_modifikator = select.getAttribute('class');
	const select_selected_option = select.querySelector('option:checked');
	select.setAttribute('data-default', select_selected_option.value);
	select.style.display = 'none';

	select_parent.insertAdjacentHTML('beforeend', '<div class="select select_' + select_modifikator + '"></div>');

	let new_select = select.parentElement.querySelector('.select');
	new_select.appendChild(select);
	select_item(select);
}
function select_item(select) {
	const select_parent = select.parentElement;
	const select_items = select_parent.querySelector('.select__item');
	const select_options = select.querySelectorAll('option');
	const select_selected_option = select.querySelector('option:checked');
	const select_selected_text = select_selected_option.text;
	const select_type = select.getAttribute('data-type');

	if (select_items) {
		select_items.remove();
	}

	let select_type_content = '';
	if (select_type == 'input') {
		select_type_content = '<div class="select__value"><input autocomplete="off" type="text" name="form[]" value="' + select_selected_text + '" data-error="Ошибка" data-value="' + select_selected_text + '" class="select__input"></div>';
	} else {
		select_type_content = '<div class="select__value"><span>' + select_selected_text + '</span></div>';
	}

	select_parent.insertAdjacentHTML('beforeend',
		'<div class="select__item">' +
		'<div class="select__title">' + select_type_content + '</div>' +
		'<div class="select__options">' + select_get_options(select_options) + '</div>' +
		'</div></div>');

	select_actions(select, select_parent);
}
function select_actions(original, select) {
	const select_item = select.querySelector('.select__item');
	const select_body_options = select.querySelector('.select__options');
	const select_options = select.querySelectorAll('.select__option');
	const select_type = original.getAttribute('data-type');
	const select_input = select.querySelector('.select__input');

	select_item.addEventListener('click', function () {
		let selects = document.querySelectorAll('.select');
		for (let index = 0; index < selects.length; index++) {
			const select = selects[index];
			const select_body_options = select.querySelector('.select__options');
			if (select != select_item.closest('.select')) {
				select.classList.remove('_active');
				_slideUp(select_body_options, 100);
			}
		}
		_slideToggle(select_body_options, 100);
		select.classList.toggle('_active');
	});

	for (let index = 0; index < select_options.length; index++) {
		const select_option = select_options[index];
		const select_option_value = select_option.getAttribute('data-value');
		const select_option_text = select_option.innerHTML;

		if (select_type == 'input') {
			select_input.addEventListener('keyup', select_search);
		} else {
			if (select_option.getAttribute('data-value') == original.value) {
				select_option.style.display = 'none';
			}
		}
		select_option.addEventListener('click', function () {
			for (let index = 0; index < select_options.length; index++) {
				const el = select_options[index];
				el.style.display = 'block';
			}
			if (select_type == 'input') {
				select_input.value = select_option_text;
				original.value = select_option_value;
			} else {
				select.querySelector('.select__value').innerHTML = '<span>' + select_option_text + '</span>';
				original.value = select_option_value;
				select_option.style.display = 'none';
			}
		});
	}
}
function select_get_options(select_options) {
	if (select_options) {
		let select_options_content = '';
		for (let index = 0; index < select_options.length; index++) {
			const select_option = select_options[index];
			const select_option_value = select_option.value;
			if (select_option_value != '') {
				const select_option_text = select_option.text;
				select_options_content = select_options_content + '<div data-value="' + select_option_value + '" class="select__option">' + select_option_text + '</div>';
			}
		}
		return select_options_content;
	}
}
function select_search(e) {
	let select_block = e.target.closest('.select ').querySelector('.select__options');
	let select_options = e.target.closest('.select ').querySelectorAll('.select__option');
	let select_search_text = e.target.value.toUpperCase();

	for (let i = 0; i < select_options.length; i++) {
		let select_option = select_options[i];
		let select_txt_value = select_option.textContent || select_option.innerText;
		if (select_txt_value.toUpperCase().indexOf(select_search_text) > -1) {
			select_option.style.display = "";
		} else {
			select_option.style.display = "none";
		}
	}
}
function selects_update_all() {
	let selects = document.querySelectorAll('select');
	if (selects) {
		for (let index = 0; index < selects.length; index++) {
			const select = selects[index];
			select_item(select);
		}
	}
}


let _slideUp = (target, duration = slideUpDuration) => {
	target.style.transitionProperty = 'height, margin, padding';
	target.style.transitionDuration = duration + 'ms';
	target.style.height = target.offsetHeight + 'px';
	target.offsetHeight;
	target.style.overflow = 'hidden';
	target.style.height = 0;
	target.style.paddingTop = 0;
	target.style.paddingBottom = 0;
	target.style.marginTop = 0;
	target.style.marginBottom = 0;
	window.setTimeout(() => {
		target.style.display = 'none';
		target.style.removeProperty('height');
		target.style.removeProperty('padding-top');
		target.style.removeProperty('padding-bottom');
		target.style.removeProperty('margin-top');
		target.style.removeProperty('margin-bottom');
		target.style.removeProperty('overflow');
		target.style.removeProperty('transition-duration');
		target.style.removeProperty('transition-property');
		target.classList.remove('_slide');
	}, duration);
}
let _slideDown = (target, duration = slideUpDuration) => {
	target.style.removeProperty('display');
	let display = window.getComputedStyle(target).display;
	if (display === 'none')
		display = 'block';

	target.style.display = display;
	let height = target.offsetHeight;
	target.style.overflow = 'hidden';
	target.style.height = 0;
	target.style.paddingTop = 0;
	target.style.paddingBottom = 0;
	target.style.marginTop = 0;
	target.style.marginBottom = 0;
	target.offsetHeight;
	target.style.transitionProperty = "height, margin, padding";
	target.style.transitionDuration = duration + 'ms';
	target.style.height = height + 'px';
	target.style.removeProperty('padding-top');
	target.style.removeProperty('padding-bottom');
	target.style.removeProperty('margin-top');
	target.style.removeProperty('margin-bottom');
	window.setTimeout(() => {
		target.style.removeProperty('height');
		target.style.removeProperty('overflow');
		target.style.removeProperty('transition-duration');
		target.style.removeProperty('transition-property');
		target.classList.remove('_slide');
	}, duration);
}
let _slideToggle = (target, duration = slideUpDuration) => {
	if (!target.classList.contains('_slide')) {
		target.classList.add('_slide');
		if (window.getComputedStyle(target).display === 'none') {
			return _slideDown(target, duration);
		} else {
			return _slideUp(target, duration);
		}
	}
}
window.onload = function () {
    document.body.classList.add("_hide");
    document.body.style.overflow = "hidden";
    this.setTimeout(() => {
        document.body.classList.add("_loaded");
        document.body.classList.remove("_hide");
        document.body.style.overflow = "auto";
    }, 500);
}
// * For detect device type
const isMobile = {
    Android: function () {
        return navigator.userAgent.match(/Android/i);
    },
    iOS: function () {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i);
    },
    Windows: function () {
        return navigator.userAgent.match(/IEMobile/i);
    },
    any: function () {
        return (
            isMobile.Android() ||
            isMobile.iOS() ||
            isMobile.Windows()
        );
    }
};

const headerMenuIcon = document.querySelector(".header__menu-icon");
const headerMenuBody = document.querySelector(".header__menu-body");
if (headerMenuIcon) {
    headerMenuIcon.addEventListener("click", function (e) {
        document.body.classList.toggle("_lock");
        this.classList.toggle("_active");
        headerMenuBody.classList.toggle("_active");
    });
}

const asideMenuIcon = document.querySelector(".aside__menu-icon");
const asideMenuBody = document.querySelector(".aside__menu-body");
if (asideMenuIcon) {
    asideMenuIcon.addEventListener("click", function (e) {
        document.body.classList.toggle("_lock");
        this.classList.toggle("_active");
        asideMenuBody.classList.toggle("_active");
    });
}

const newsMenuIcon = document.querySelector(".news-submenu__icon");
const newsMenuBody = document.querySelector(".news-submenu__body");
if (newsMenuIcon) {
    newsMenuIcon.addEventListener("click", function (e) {
        document.body.classList.toggle("_lock");
        this.classList.toggle("_active");
        newsMenuBody.classList.toggle("_active");
    });
}
const ReadMore = (() => {
    let s;

    return {

        settings() {
            return {
                content: document.querySelectorAll('.aside-comment__text'),
                originalContentArr: [],
                truncatedContentArr: [],
                moreLink: "Читать далее",
                lessLink: "Свернуть",
            }
        },

        init() {
            s = this.settings();
            this.bindEvents();
        },

        bindEvents() {
            ReadMore.truncateText();
        },

        countWords(str) {
            return str.split(/\s+/).length;
        },

        ellipseContent(str, wordsNum) {
            return str.split(/\s+/).slice(0, wordsNum).join(' ') + '...';
        },

        truncateText() {

            for (let i = 0; i < s.content.length; i++) {
                const originalContent = s.content[i].innerHTML;
                const numberOfWords = s.content[i].dataset.rmWords;
                const truncateContent = ReadMore.ellipseContent(originalContent, numberOfWords);
                const originalContentWords = ReadMore.countWords(originalContent);

                s.originalContentArr.push(originalContent);
                s.truncatedContentArr.push(truncateContent);

                if (numberOfWords < originalContentWords) {
                    s.content[i].innerHTML = s.truncatedContentArr[i];
                    let self = i;
                    ReadMore.createLink(self)
                }
            }
            ReadMore.handleClick(s.content);
        },

        createLink(index) {
            const linkWrap = document.createElement('span');

            linkWrap.className = 'read-more__link-wrap';

            linkWrap.innerHTML = `<a id="read-more_${index}" class="comments-item__btn" style="cursor:pointer;">${s.moreLink}</a>`;

            s.content[index].parentNode.insertBefore(linkWrap, s.content[index].nextSibling);

        },

        handleClick(el) {
            const readMoreLink = document.querySelectorAll('.comments-item__btn');

            for (let j = 0, l = readMoreLink.length; j < l; j++) {

                readMoreLink[j].addEventListener('click', function () {

                    const moreLinkID = this.getAttribute('id');
                    let index = moreLinkID.split('_')[1];

                    el[index].classList.toggle('is-expanded');

                    if (this.dataset.clicked !== 'true') {
                        el[index].innerHTML = s.originalContentArr[index];
                        this.innerHTML = s.lessLink;
                        this.dataset.clicked = true;
                    } else {
                        el[index].innerHTML = s.truncatedContentArr[index];
                        this.innerHTML = s.moreLink;
                        this.dataset.clicked = false;
                    }
                });
            }
        },

        openAll() {
            const instances = document.querySelectorAll('.comments-item__btn');
            for (let i = 0; i < instances.length; i++) {
                content[i].innerHTML = s.truncatedContentArr[i];
                instances[i].innerHTML = s.moreLink;
            }
        }
    }
})();

ReadMore.init()
const loadmore = document.querySelector('#loadmore');
let currentItems = 2;
if (loadmore) {
    loadmore.addEventListener('click', (e) => {

        const elementList = document.querySelectorAll('.aside-comment');
        for (let i = currentItems; i < currentItems + 3; i++) {
            if (elementList[i]) {
                elementList[i].style.display = 'block';
            }
        }
        currentItems += 3;

        if (currentItems >= elementList.length) {
            e.target.style.display = 'none';
        }
    })
}
const paginationList = document.querySelector(".pagination__list");
let totalPages = 20;
let page = 10;

function createPagination(totalPages, page) {
    let liElem = "";
    let activeLi;
    let beforePage = page - 1; // 5 - 1 = 4
    let afterPage = page + 1; // 5 + 1 = 6

    if (page > 1) {

        liElem += `<li class="pagination__list-item prev" onclick="createPagination(totalPages, ${page - 1
            })"><div class="article-content__item-icon">
            <svg width="7" height="12" viewBox="0 0 7 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0.166238 6.22063L5.70186 11.5061C5.92272 11.7202 6.27985 11.7202 6.50071 11.5061L6.83435 11.1825C7.05522 10.9684 7.05522 10.6221 6.83435 10.408L2.02711 5.83333L6.82966 1.25871C7.05052 1.04456 7.05052 0.698269 6.82966 0.484118L6.49601 0.160613C6.27515 -0.0535377 5.91802 -0.0535377 5.69716 0.160613L0.161539 5.44604C-0.0546227 5.66019 -0.0546227 6.00648 0.166238 6.22063Z" fill="#A7B0BC"/>
            </svg>
        </div></li>`;
    }
    if (page > 2) {
        liElem += `<li class="pagination__list-item first num" onclick="createPagination(totalPages, 1)"><span>1</span></li>`;

        if (page > 3) {
            liElem += `<li class="pagination__list-item dots"><span>...</span></li>`;
        }
    }

    if (page == totalPages) {
        beforePage = beforePage - 2;
    } else if (page == totalPages - 1) {
        beforePage = beforePage - 1;
    }

    if (page == 1) {
        afterPage = afterPage + 2;
    } else if (page == 2) {
        afterPage = afterPage + 1;
    }

    for (let pageLenght = beforePage; pageLenght <= afterPage; pageLenght++) {
        if (pageLenght > totalPages) {
            continue;
        }
        if (pageLenght == 0) {
            pageLenght = pageLenght + 1;
        }
        if (page == pageLenght) {
            activeLi = "_active";
        } else {
            activeLi = "";
        }
        liElem += `<li class="pagination__list-item num ${activeLi}" onclick="createPagination(totalPages, ${pageLenght})"><span>${pageLenght}</span></li>`;
    }

    if (page < totalPages - 1) {
        if (page < totalPages - 2) {
            liElem += `<li class="pagination__list-item dots"><span>...</span></li>`;
        }

        liElem += `<li class="pagination__list-item last num" onclick="createPagination(totalPages, ${totalPages})"><span>${totalPages}<span></li>`;
    }

    if (page < totalPages) {
        liElem += `<li class="pagination__list-item next" onclick="createPagination(totalPages, ${page + 1
            })"><div class="article-content__item-icon">
            <svg width="7" height="12" viewBox="0 0 7 12" fill="none"
                xmlns="http://www.w3.org/2000/svg">
                <path
                    d="M6.83376 6.22063L1.29814 11.5061C1.07728 11.7202 0.720147 11.7202 0.499286 11.5061L0.165646 11.1825C-0.0552152 10.9684 -0.0552152 10.6221 0.165646 10.408L4.97289 5.83333L0.170345 1.25871C-0.050516 1.04456 -0.050516 0.698269 0.170345 0.484118L0.503986 0.160613C0.724846 -0.0535377 1.08198 -0.0535377 1.30284 0.160613L6.83846 5.44604C7.05462 5.66019 7.05462 6.00648 6.83376 6.22063Z"
                    fill="#A7B0BC" />
            </svg>
        </div></li>`;
    }
    paginationList.innerHTML = liElem;
    return liElem;
}

if (paginationList) {
    paginationList.innerHTML = createPagination(totalPages, page);
}